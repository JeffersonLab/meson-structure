#!/usr/bin/env python3
"""
Script: t_analysis.py

Focused analysis of t-values from CSV files generated by csv_reco_dis.cxx
Creates specific histograms with controlled binning and saves in UHI format.

Usage:
    python t_analysis.py --outdir output_dir file1.csv file2.csv
    python t_analysis.py -e 10000 data/*.csv

Dependencies:
    pip install pandas numpy matplotlib hist mplhep
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import hist
from hist import Hist
from hist.axis import Regular as Axis


import json_fix
import json
import argparse
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')


json.fallback_table[np.ndarray] = lambda array: array.tolist()


# Optional: Use HEP styling
try:
    import mplhep as hep
    plt.style.use(hep.style.ROOT)
except ImportError:
    print("Note: mplhep not installed, using default matplotlib style")


###############################################################################
# Data Loading
###############################################################################

def concat_csvs_with_unique_events(files):
    """Load and concatenate CSV files with globally unique event IDs"""
    dfs = []
    offset = 0

    for file in files:
        print(f"  Reading: {file}")
        if str(file).endswith('.zip'):
            df = pd.read_csv(file, compression='zip')
        else:
            df = pd.read_csv(file)
        
        df['evt'] = df['evt'] + offset
        offset = df['evt'].max() + 1
        dfs.append(df)

    return pd.concat(dfs, ignore_index=True)


###############################################################################
# Histogram Creation with Controlled Limits
###############################################################################

def create_histograms():
    """Create all histograms with predefined binning"""
    hists = {}
    
    # 1D Histograms for t-values
    # mc_true_t: spectator t from MC truth
    hists['mc_true_t'] = Hist(Axis(100, 0, 0.1, name="mc_true_t", label=r"$-t_{\mathrm{MC,true}}$ [GeV$^2$]")
    )
    
    # mc_lam_tb_t: t calculated with true beam
    hists['mc_lam_tb_t'] = Hist(Axis(100, 0, 0.1, name="mc_lam_tb_t", label=r"$-t_{\Lambda,\mathrm{true~beam}}$ [GeV$^2$]"))
    
    # mc_lam_exp_t: t calculated with experimental beam
    hists['mc_lam_exp_t'] = Hist(Axis(100, 0, 100, name="mc_lam_exp_t", label=r"$t_{\Lambda,\mathrm{exp~beam}}$ [GeV$^2$]"))
    
    # ff_lam_tb_t: far-forward Lambda with true beam
    hists['ff_lam_tb_t'] = Hist(Axis(100, 0, 0.1, name="ff_lam_tb_t", label=r"$t_{\mathrm{FF}\Lambda,\mathrm{true~beam}}$ [GeV$^2$]"))
    
    # ff_lam_exp_t: far-forward Lambda with experimental beam
    hists['ff_lam_exp_t'] = Hist(Axis(100, 0, 0.1, name="ff_lam_exp_t", label=r"$t_{\mathrm{FF}\Lambda,\mathrm{exp~beam}}$ [GeV$^2$]"))
    
    # DIS kinematics
    hists['mc_x'] = Hist(Axis(100, 1e-4, 1.0, name="mc_x", label=r"$x_{\mathrm{Bj}}$"))
    
    hists['mc_q2'] = Hist(Axis(100, 1.0, 500.0, name="mc_q2", label=r"$Q^2$ [GeV$^2$]"))
    
    # 2D Histograms
    # 1. mc_x vs mc_q2 (with log x-axis)
    hists['mc_x_vs_mc_q2'] = Hist(
        Axis(50, 1e-4, 1.0, name="mc_x", label=r"$x_{\mathrm{Bj}}$"),
        Axis(50, 1.0, 500.0, name="mc_q2", label=r"$Q^2$ [GeV$^2$]")
    )
    
    # 2. mc_true_t vs mc_x
    hists['mc_true_t_vs_mc_x'] = Hist(
        Axis(50, 1e-4, 1.0, name="mc_x", label=r"$x_{\mathrm{Bj}}$", transform=hist.axis.transform.log),
        Axis(50, -2.0, 0.0, name="mc_true_t", label=r"$t_{\mathrm{MC,true}}$ [GeV$^2$]")
    )
    
    # 3. mc_true_t vs mc_q2
    hists['mc_true_t_vs_mc_q2'] = Hist(
        Axis(50, 1.0, 500.0, name="mc_q2", label=r"$Q^2$ [GeV$^2$]"),
        Axis(50, -2.0, 0.0, name="mc_true_t", label=r"$t_{\mathrm{MC,true}}$ [GeV$^2$]")
    )
    
    # Correlation plots: t-values vs mc_true_t
    # 4. mc_lam_tb_t vs mc_true_t
    hists['mc_lam_tb_t_vs_mc_true_t'] = Hist(
        Axis(50, -2.0, 0.0, name="mc_true_t", label=r"$t_{\mathrm{MC,true}}$ [GeV$^2$]"),
        Axis(50, -2.0, 0.0, name="mc_lam_tb_t", label=r"$t_{\Lambda,\mathrm{true~beam}}$ [GeV$^2$]")
    )
    
    # 5. mc_lam_exp_t vs mc_true_t
    hists['mc_lam_exp_t_vs_mc_true_t'] = Hist(
        Axis(50, -2.0, 0.0, name="mc_true_t", label=r"$t_{\mathrm{MC,true}}$ [GeV$^2$]"),
        Axis(50, -2.0, 0.0, name="mc_lam_exp_t", label=r"$t_{\Lambda,\mathrm{exp~beam}}$ [GeV$^2$]")
    )
    
    # 6. ff_lam_tb_t vs mc_true_t
    hists['ff_lam_tb_t_vs_mc_true_t'] = Hist(
        Axis(50, -2.0, 0.0, name="mc_true_t", label=r"$t_{\mathrm{MC,true}}$ [GeV$^2$]"),
        Axis(50, -2.0, 0.0, name="ff_lam_tb_t", label=r"$t_{\mathrm{FF}\Lambda,\mathrm{true~beam}}$ [GeV$^2$]")
    )
    
    # 7. ff_lam_exp_t vs mc_true_t
    hists['ff_lam_exp_t_vs_mc_true_t'] = Hist(
        Axis(50, -2.0, 0.0, name="mc_true_t", label=r"$t_{\mathrm{MC,true}}$ [GeV$^2$]"),
        Axis(50, -2.0, 0.0, name="ff_lam_exp_t", label=r"$t_{\mathrm{FF}\Lambda,\mathrm{exp~beam}}$ [GeV$^2$]")
    )
    
    return hists


###############################################################################
# Fill Histograms
###############################################################################

def fill_histograms(hists, df):
    """Fill histograms with data from DataFrame"""
    
    # Clean data - remove NaN values
    print("\nFilling histograms...")

    # Make t minus t
    t_columns = ['mc_true_t', 'mc_lam_tb_t', 'mc_lam_exp_t', 'ff_lam_tb_t', 'ff_lam_exp_t']
    for col in t_columns:
        df[col] = -df[col]

    print(df[['mc_true_t', 'mc_lam_tb_t', 'mc_lam_exp_t', 'ff_lam_tb_t', 'ff_lam_exp_t']].head())
    
    # Fill 1D histograms
    for col in ['mc_true_t', 'mc_lam_tb_t', 'mc_lam_exp_t', 'ff_lam_tb_t', 'ff_lam_exp_t', 'mc_x', 'mc_q2']:
        if col in df.columns and col in hists:
            clean_data = df[col].dropna()
            if len(clean_data) > 0:
                hists[col].fill(clean_data.values)
                print(f"  Filled {col}: {len(clean_data)} entries")
    
    # Fill 2D histograms
    # 1. mc_x vs mc_q2
    mask = df['mc_x'].notna() & df['mc_q2'].notna()
    if mask.sum() > 0:
        hists['mc_x_vs_mc_q2'].fill(
            mc_x=df.loc[mask, 'mc_x'].values,
            mc_q2=df.loc[mask, 'mc_q2'].values
        )
        print(f"  Filled mc_x_vs_mc_q2: {mask.sum()} entries")
    
    # 2. mc_true_t vs mc_x
    mask = df['mc_true_t'].notna() & df['mc_x'].notna()
    if mask.sum() > 0:
        hists['mc_true_t_vs_mc_x'].fill(
            mc_x=df.loc[mask, 'mc_x'].values,
            mc_true_t=df.loc[mask, 'mc_true_t'].values
        )
        print(f"  Filled mc_true_t_vs_mc_x: {mask.sum()} entries")
    
    # 3. mc_true_t vs mc_q2
    mask = df['mc_true_t'].notna() & df['mc_q2'].notna()
    if mask.sum() > 0:
        hists['mc_true_t_vs_mc_q2'].fill(
            mc_q2=df.loc[mask, 'mc_q2'].values,
            mc_true_t=df.loc[mask, 'mc_true_t'].values
        )
        print(f"  Filled mc_true_t_vs_mc_q2: {mask.sum()} entries")
    
    # 4. mc_lam_tb_t vs mc_true_t
    mask = df['mc_true_t'].notna() & df['mc_lam_tb_t'].notna()
    if mask.sum() > 0:
        hists['mc_lam_tb_t_vs_mc_true_t'].fill(
            mc_true_t=df.loc[mask, 'mc_true_t'].values,
            mc_lam_tb_t=df.loc[mask, 'mc_lam_tb_t'].values
        )
        print(f"  Filled mc_lam_tb_t_vs_mc_true_t: {mask.sum()} entries")
    
    # 5. mc_lam_exp_t vs mc_true_t
    mask = df['mc_true_t'].notna() & df['mc_lam_exp_t'].notna()
    if mask.sum() > 0:
        hists['mc_lam_exp_t_vs_mc_true_t'].fill(
            mc_true_t=df.loc[mask, 'mc_true_t'].values,
            mc_lam_exp_t=df.loc[mask, 'mc_lam_exp_t'].values
        )
        print(f"  Filled mc_lam_exp_t_vs_mc_true_t: {mask.sum()} entries")
    
    # 6. ff_lam_tb_t vs mc_true_t
    mask = df['mc_true_t'].notna() & df['ff_lam_tb_t'].notna()
    if mask.sum() > 0:
        hists['ff_lam_tb_t_vs_mc_true_t'].fill(
            mc_true_t=df.loc[mask, 'mc_true_t'].values,
            ff_lam_tb_t=df.loc[mask, 'ff_lam_tb_t'].values
        )
        print(f"  Filled ff_lam_tb_t_vs_mc_true_t: {mask.sum()} entries")
    
    # 7. ff_lam_exp_t vs mc_true_t
    mask = df['mc_true_t'].notna() & df['ff_lam_exp_t'].notna()
    if mask.sum() > 0:
        hists['ff_lam_exp_t_vs_mc_true_t'].fill(
            mc_true_t=df.loc[mask, 'mc_true_t'].values,
            ff_lam_exp_t=df.loc[mask, 'ff_lam_exp_t'].values
        )
        print(f"  Filled ff_lam_exp_t_vs_mc_true_t: {mask.sum()} entries")


###############################################################################
# Plotting Functions
###############################################################################

def plot_1d_histogram(hist_1d, output_path):
    """Plot a simple 1D histogram"""
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Use hist's built-in plotting
    hist_1d.plot1d(ax=ax)
    
    # Add statistics to the plot
    values = hist_1d.values()
    edges = hist_1d.axes[0].edges
    centers = (edges[:-1] + edges[1:]) / 2
    
    if values.sum() > 0:
        mean = np.average(centers, weights=values)
        variance = np.average((centers - mean)**2, weights=values)
        std = np.sqrt(variance)
        
        # Add statistics box
        stats_text = f'Entries: {int(values.sum())}\n'
        stats_text += f'Mean: {mean:.3f}\n'
        stats_text += f'Std: {std:.3f}'
        
        ax.text(0.05, 0.95, stats_text, transform=ax.transAxes,
                verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.5),
                fontsize=10)
    
    # Set labels
    if hist_1d.axes[0].label:
        ax.set_xlabel(hist_1d.axes[0].label)
    else:
        ax.set_xlabel(hist_1d.axes[0].name)
    ax.set_ylabel('Counts')
    ax.set_title(f'{hist_1d.axes[0].name} Distribution')
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(output_path, dpi=150, bbox_inches='tight')
    plt.close()
    print(f"  Saved: {output_path}")


def plot_2d_histogram(hist_2d, output_path, diagonal_line=False):
    """Plot a 2D histogram using hist.plot"""
    fig, ax = plt.subplots(figsize=(10, 8))
    
    # Use hist's built-in plotting
    hist_2d.plot2d(ax=ax, cmap='viridis')
    
    # Add diagonal line for correlation plots
    if diagonal_line:
        xlim = ax.get_xlim()
        ylim = ax.get_ylim()
        lim_min = max(xlim[0], ylim[0])
        lim_max = min(xlim[1], ylim[1])
        ax.plot([lim_min, lim_max], [lim_min, lim_max], 'r--', alpha=0.5, lw=2, label='y=x')
        ax.legend()
    
    plt.tight_layout()
    plt.savefig(output_path, dpi=150, bbox_inches='tight')
    plt.close()
    print(f"  Saved: {output_path}")


def plot_t_comparison(hists, output_dir, plot_number, t_columns, title_suffix=""):
    """Plot multiple t distributions on the same plot for comparison"""
    fig, ax = plt.subplots(figsize=(10, 6))
    
    colors = ['blue', 'red', 'green', 'orange', 'purple']
    
    for i, col in enumerate(t_columns):
        if col in hists and hists[col].sum() > 0:
            # Get the histogram
            h = hists[col]
            
            # Normalize for shape comparison
            h_normalized = h / h.sum()
            
            # Plot using hist's plot method
            h_normalized.plot1d(
                ax=ax,
                label=h.axes[0].label if h.axes[0].label else col,
                color=colors[i % len(colors)],
                linewidth=2,
                alpha=0.8
            )
    
    ax.set_xlabel(r'$t$ [GeV$^2$]')
    ax.set_ylabel('Normalized Counts')
    ax.set_title(f't-value Comparison{title_suffix}')
    ax.legend(loc='best')
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    output_path = output_dir / f"plot_{plot_number:02d}_t_comparison{title_suffix.replace(' ', '_')}.png"
    plt.savefig(output_path, dpi=150, bbox_inches='tight')
    plt.close()
    print(f"  Saved: {output_path}")


###############################################################################
# Save Histograms in UHI Format
###############################################################################

def save_histogram_uhi(hist_obj, output_path):
    """Save histogram in UHI JSON format following the specification"""
    
    # Get the proper UHI format using hist's serialization
    # According to UHI spec, we should use the standard format
    
    # For proper UHI format, we create the dict structure

    import boost_histogram.serialization as bhs

    uhi_dict = bhs.to_uhi(hist_obj)
    
    with open(output_path, 'w') as f:
        json.dump(uhi_dict, f, indent=2)
    
    print(f"  Saved UHI: {output_path}")


###############################################################################
# Main Analysis
###############################################################################

def main():
    parser = argparse.ArgumentParser(description='T-value focused analysis of CSV files')
    parser.add_argument('-o', '--outdir', type=str, default='t_analysis_output',
                        help='Directory for output plots and JSON files')
    parser.add_argument('-e', '--events', type=int, default=None,
                        help='Number of events to process')
    parser.add_argument('files', nargs='+', help='Input CSV files')
    
    args = parser.parse_args()
    
    # Create output directories
    output_dir = Path(args.outdir)
    output_dir.mkdir(parents=True, exist_ok=True)
    
    plots_dir = output_dir / 'plots'
    plots_dir.mkdir(exist_ok=True)
    
    plots_1d_dir = output_dir / 'plots_1d'
    plots_1d_dir.mkdir(exist_ok=True)
    
    json_dir = output_dir / 'histograms_uhi'
    json_dir.mkdir(exist_ok=True)
    
    print("=" * 70)
    print("T-Value Analysis")
    print("=" * 70)
    
    # Load data
    print("\nLoading CSV files...")
    df = concat_csvs_with_unique_events([Path(f) for f in args.files])
    
    if args.events is not None:
        print(f"Limiting to {args.events} events")
        df = df.head(args.events)
    
    print(f"Total events: {len(df)}")
    
    # Create and fill histograms
    hists = create_histograms()
    fill_histograms(hists, df)
    
    # Save all histograms in UHI format
    print("\nSaving histograms in UHI format...")
    for name, h in hists.items():
        if h.sum() > 0:  # Only save non-empty histograms
            save_histogram_uhi(h, json_dir / f"{name}.json")
    
    # Create plots
    print("\nCreating plots...")
    
    # ========== Simple 1D Histograms ==========
    print("\nCreating 1D histograms...")
    
    # Plot individual 1D histograms for each t variable
    t_variables = ['mc_true_t', 'mc_lam_tb_t', 'mc_lam_exp_t', 'ff_lam_tb_t', 'ff_lam_exp_t']
    for var in t_variables:
        if var in hists and hists[var].sum() > 0:
            plot_1d_histogram(hists[var], plots_1d_dir / f"hist_1d_{var}.png")
    
    # Plot 1D histograms for DIS kinematics
    if 'mc_x' in hists and hists['mc_x'].sum() > 0:
        plot_1d_histogram(hists['mc_x'], plots_1d_dir / "hist_1d_mc_x.png")
    
    if 'mc_q2' in hists and hists['mc_q2'].sum() > 0:
        plot_1d_histogram(hists['mc_q2'], plots_1d_dir / "hist_1d_mc_q2.png")
    
    # ========== 2D Histograms (Original plots 1-7) ==========
    print("\nCreating 2D histograms...")
    
    # Plot 1: mc_x vs mc_q2 (2D)
    if 'mc_x_vs_mc_q2' in hists:
        plot_2d_histogram(hists['mc_x_vs_mc_q2'], 
                         plots_dir / "plot_01_mc_x_vs_mc_q2.png")
    
    # Plot 2: mc_true_t vs mc_x (2D)
    if 'mc_true_t_vs_mc_x' in hists:
        plot_2d_histogram(hists['mc_true_t_vs_mc_x'],
                         plots_dir / "plot_02_mc_true_t_vs_mc_x.png")
    
    # Plot 3: mc_true_t vs mc_q2 (2D)
    if 'mc_true_t_vs_mc_q2' in hists:
        plot_2d_histogram(hists['mc_true_t_vs_mc_q2'],
                         plots_dir / "plot_03_mc_true_t_vs_mc_q2.png")
    
    # Plots 4-7: t-correlations with mc_true_t
    correlation_plots = [
        ('mc_lam_tb_t_vs_mc_true_t', 4),
        ('mc_lam_exp_t_vs_mc_true_t', 5),
        ('ff_lam_tb_t_vs_mc_true_t', 6),
        ('ff_lam_exp_t_vs_mc_true_t', 7)
    ]
    
    for hist_name, plot_num in correlation_plots:
        if hist_name in hists:
            plot_2d_histogram(hists[hist_name],
                            plots_dir / f"plot_{plot_num:02d}_{hist_name}.png",
                            diagonal_line=True)
    
    # ========== Comparison Plots (Original plots 8-10) ==========
    print("\nCreating comparison plots...")
    
    # Plot 8: MC Lambda t-values comparison
    plot_t_comparison(hists, plots_dir, 8, 
                     ['mc_true_t', 'mc_lam_tb_t', 'mc_lam_exp_t'],
                     title_suffix=" (MC Lambda)")
    
    # Plot 9: Far-forward Lambda t-values comparison
    plot_t_comparison(hists, plots_dir, 9,
                     ['mc_true_t', 'ff_lam_tb_t', 'ff_lam_exp_t'],
                     title_suffix=" (FF Lambda)")
    
    # Plot 10: All t-values comparison
    plot_t_comparison(hists, plots_dir, 10,
                     ['mc_true_t', 'mc_lam_tb_t', 'mc_lam_exp_t', 'ff_lam_tb_t', 'ff_lam_exp_t'],
                     title_suffix=" (All)")
    
    # Create summary statistics
    print("\nSummary Statistics:")
    print("-" * 70)
    
    all_variables = ['mc_true_t', 'mc_lam_tb_t', 'mc_lam_exp_t', 'ff_lam_tb_t', 'ff_lam_exp_t', 'mc_x', 'mc_q2']
    
    summary = {}
    for col in all_variables:
        if col in df.columns:
            clean_data = df[col].dropna()
            if len(clean_data) > 0:
                summary[col] = {
                    'entries': int(len(clean_data)),
                    'mean': float(clean_data.mean()),
                    'std': float(clean_data.std()),
                    'min': float(clean_data.min()),
                    'max': float(clean_data.max())
                }
                print(f"{col:20s}: mean={summary[col]['mean']:7.3f}, "
                      f"std={summary[col]['std']:6.3f}, "
                      f"entries={summary[col]['entries']:6d}")
    
    # Save summary
    with open(output_dir / 'summary.json', 'w') as f:
        json.dump(summary, f, indent=2)
    
    print("\n" + "=" * 70)
    print("Analysis Complete!")
    print(f"Output directory: {output_dir}")
    print(f"  2D plots and comparisons: {plots_dir}")
    print(f"  1D histogram plots: {plots_1d_dir}")
    print(f"  UHI histograms: {json_dir}")
    print("=" * 70)


if __name__ == "__main__":
    main()
